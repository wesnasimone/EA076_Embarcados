/*#######################################################
#                                                       #
#            Módulo II - Teclado Matricial              #
#                                                       #
#     Mariane Martins                - RA:221919        #
#     Wesna Simone Bulla de Araujo   - RA:225843        #
#                                                       #
#                                                       #
#########################################################
*/

/*
Esse módulo tem por objetivo acionar um teclado matricial através
do conceito de máquina de estados finita. Em resumo, o programa
verifica qual o estado em que o programa se encontra permitindo
assim, a transição de um estado para outro. Há quatro estados principais (0, 1, 2 e 3), 
com duas possibilidades cada um. Caso o programa não esteja no estado analisado 
ele pula para o próximo estado. No entanto, caso o programa esteja no estado analisado 
ele verifica qual coluna foi pressionada e avança para os estados 4, 5 e 6, que irá verificar 
por meio do mecânismo de debounce se o botão do teclado que está associado a linha
e a coluna em questão foram realmente pressionados e se sim irá retornar o valor da 
tecla por meio de um display LCD. Caso não, o programa retorna para o estado inicial (estado 0). 
A mesma verificação de debounce também é feita após a soltura do botão para garantir a
correta transição de estados. 

Além disso, é importante mencionar que cada estado está associado com uma linha
que para a nossa máquina de estados corresponde as saídas. Enquanto que as
colunas representam as entradas da máquina de estados. Assim, a varredura do 
teclado matricial é feita percorrendo cada linha e para cada linha são analisadas
as colunas.
*/

//Importa bibliotecas
#include <LiquidCrystal.h>                     //Importa biblioteca para controlar o display 16x2


//Declaração de variáveis
#define L1 13                                 //Define pino relacionado a primeira linha do teclado matricial (linha 0)
#define L2 7                                  //Define pino relacionado a segunda linha do teclado matricial (linha 1)
#define L3 4                                  //Define pino relacionado a terceira linha do teclado matricial (linha 2)
#define L4 3                                  //Define pino relacionado a quarta linha do teclado matricial (linha 3)
#define C1 2                                  //Define pino relacionado a primeira coluna a esquerda do teclado matricial (coluna 0)
#define C2 A0                                 //Define pino relacionado a segunda coluna do teclado matricial (coluna 1)
#define C3 A1                                 //Define pino relacionado a terceira coluna a direita do teclado matricial (coluna 2)
#define rs 6                                  //Define o pino responsável por selecionar a natureza do dado, isto é, comando ou configuração
#define e 8                                   //Define pino reponsável por habilitar operações
#define rw 9                                  //Define pino responsável pela leitura ou escrita. Se leitura o pino recebe 1, se escrita o pino recebe 0
#define d4 10                                 //Define pino de dados. Note que foi escolhida a configuração de apenas 4 bits ao invés de 8 bits disponíveis no display
#define d5 11                                 //
#define d6 12                                 //
#define d7 5                                  //

volatile int tempo = 0;                       //Define variável contador de tempo que também será utilizada dentro da interrupção. Inicializa variável em zero.
int estado = 0;                               //Define variável relacionada a identificação do estado da máquina de estados. Inicializa pelo estado 0.
int coluna = 0;                               //Define variável relaciona a identificação da coluna do teclado matricial. Inicializa a coluna em 0 (primeira coluna).
char num = ' ';                               //Define variável relacionada ao caracter pressionado no teclado matricial. O default é espaço (não printa nada).
int linhas = 0;                               //Define variável relaciona a identificação da linha do teclado matricial. Inicializa a linha em 0 (primeira linha).
int coluna_ant = 0;                           //Define variável que irá receber o valor de leitura atual de qualquer uma das colunas para confirmar que a tecla foi pressionada. Inicializa em zero. 
char tecla;                                   //Define variável que irá receber o retorno do valor da tecla pressionada.


//Inicializa o objeto LiquidCrystal com as informações de pinos
LiquidCrystal lcd(rs, rw, e, d4, d5, d6, d7);


//Configurações iniciais --> declaração de entrada/saída para cada pino
void setup() {
    Serial.begin(9600);                         //Configura a taxa de transferência de bits para a comunicação serial. Ex:9600 bits por segundo
    pinMode(L1, OUTPUT);                        //Declara linha 0 do teclado matricial como saída, pois iremos modifica-los ao longo do programa
    pinMode(L2, OUTPUT);                        //Declara linha 1 do teclado matricial como saída, pois iremos modifica-los ao longo do programa
    pinMode(L3, OUTPUT);                        //Declara linha 2 do teclado matricial como saída, pois iremos modifica-los ao longo do programa
    pinMode(L4, OUTPUT);                        //Declara linha 3 do teclado matricial como saída, pois iremos modifica-los ao longo do programa
    pinMode(C1, INPUT_PULLUP);                  //Declara coluna 0 do teclado matricial como entrada com resistor de pull up, pois iremos lê-las ao longo do programa
    pinMode(C2, INPUT_PULLUP);                  //Declara coluna 1 do teclado matricial como entrada com resistor de pull up, pois iremos lê-las ao longo do programa
    pinMode(C3, INPUT_PULLUP);                  //Declara coluna 2 do teclado matricial como entrada com resistor de pull up, pois iremos lê-las ao longo do programa

    cli();                                      //Desabilita as interrupções
    configuracao_Timer0();                      //Configura o temporizador
    sei();                                      //Habilita as interrupções

    lcd.begin(16, 2);                           //Define o número de colunas e linhas a ser utilizada no display
    LCD_setup(num);                             //Chama a função responsável por printar o valor da tecla no display LCD
}

//Função responsável por habilitar cada uma das linhas do teclado matricial recebendo como argumento
//linhas: indica qual linha deve ser acionada
void linha(int linhas){
  //se linhas igual 0 o pino L1 é setado para o nível lógico zero e os demais permanecem em nível lógico 1
  //indicando que a primeira linha foi habilitada.
  if(linhas == 0 ){                             
    digitalWrite(L1, LOW);
    digitalWrite(L2, HIGH);
    digitalWrite(L3, HIGH);
    digitalWrite(L4, HIGH);
  }
  //se linhas igual 1 o pino L2 é setado para o nível lógico zero e os demais permanecem em nível lógico 1
  //indicando que a segunda linha foi habilitada.
  else if(linhas == 1 ){
    digitalWrite(L1, HIGH);
    digitalWrite(L2, LOW);
    digitalWrite(L3, HIGH);
    digitalWrite(L4, HIGH);
  }
  //se linhas igual 2 o pino L3 é setado para o nível lógico zero e os demais permanecem em nível lógico 1
  //indicando que a terceira linha foi habilitada.
  else if(linhas == 2){
    digitalWrite(L1, HIGH);
    digitalWrite(L2, HIGH);
    digitalWrite(L3, LOW);
    digitalWrite(L4, HIGH);
  }
  //se linhas igual 0 o pino L4 é setado para o nível lógico zero e os demais permanecem em nível lógico 1
  //indicando que a quarta linha foi habilitada.
  else if(linhas == 3){
    digitalWrite(L1, HIGH);
    digitalWrite(L2, HIGH);
    digitalWrite(L3, HIGH);
    digitalWrite(L4, LOW);
  }
}

//Função responsável por ler o valor atual do pino relacionado a cada coluna do teclado matricial recebendo como argumento
//coluna: indica qual coluna deve ser lido
int colunas(int coluna){
    //se coluna igual 0 lê o valor atual da primeira coluna a esquerda e atribuiu o resultado a variável coluna_ant. 
    if (coluna == 0){
      coluna_ant = digitalRead(C1);
    }
    //se coluna igual 1 lê o valor atual da segunda coluna (meio) e atribuiu o resultado a variável coluna_ant.
    if (coluna == 1){
      coluna_ant = digitalRead(C2);
    }
    //se coluna igual 2 lê o valor atual da terceira coluna a direita e atribuiu o resultado a variável coluna_ant.
    if (coluna == 2){
      coluna_ant = digitalRead(C3);
    }
  return coluna_ant;            //retorna o valor da leitura
}



//Função responsável pela configuração da interrupção por TIMER
void configuracao_Timer0(){
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////
   
  // TCCR0A – Timer/Counter Control Register A
  // COM0A1 COM0A0 COM0B1 COM0B0 – – WGM01 WGM00
  // 0      0      0      0          1     0
  TCCR0A = 0x02;


  // OCR0A – Output Compare Register A
  OCR0A = 24;


  // TIMSK0 – Timer/Counter Interrupt Mask Register
  // – – – – – OCIE0B OCIE0A TOIE0
  // – – – – – 0      1      0
  TIMSK0 = 0x02;
 
  // TCCR0B – Timer/Counter Control Register B
  // FOC0A FOC0B – – WGM02 CS02 CS01 CS0
  // 0     0         0     1    0    1
  TCCR0B = 0x05;
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////
}


// Rotina de interrupção por TIMER:
//A cada 1.6ms o programa principal é desviado para essa rotina que incrementa o contador tempo
//Basicamente ao multiplicar o valor desse contador com o tempo de interrupção (1.6ms) tem-se o valor tempo gasto.
ISR(TIMER0_COMPA_vect){
  tempo++;                                  //
}


//Função responsável por associar as linhas e as colunas com o respectivo caracter do teclado matricial. Essa função tem por argumentos
//coluna: indica a coluna do teclado matricial
//linhas: indica a linha do teclado matricial
char digito(int coluna, int linhas){
    if(linhas == 0 and coluna == 0){               //Se o par linhas e coluna for (0,0) indica que a tecla pressinada foi 1
      num = '1';                                   //
    }
    else if (linhas == 0 and coluna == 1){         //Se o par linhas e coluna for (0,1) indica que a tecla pressinada foi 2
      num = '2';                                   //
    }
    else if (linhas == 0 and coluna == 2){         //Se o par linhas e coluna for (0,1) indica que a tecla pressinada foi 3
      num = '3';                                   //
    }
    else if (linhas == 1 and coluna == 0){         //Se o par linhas e coluna for (1,0) indica que a tecla pressinada foi 4
      num = '4';                                   //
    }
    else if (linhas == 1 and coluna == 1){         //Se o par linhas e coluna for (1,1) indica que a tecla pressinada foi 5
      num = '5';                                   //
    }
    else if (linhas == 1 and coluna == 2){         //Se o par linhas e coluna for (1,2) indica que a tecla pressinada foi 6
      num = '6';                                   //
    }
    else if (linhas == 2 and coluna == 0){         //Se o par linhas e coluna for (2,0) indica que a tecla pressinada foi 7
      num = '7';                                   //
    }
    else if (linhas == 2 and coluna == 1){         //Se o par linhas e coluna for (2,1) indica que a tecla pressinada foi 8
      num = '8';                                   //
    }
    else if (linhas == 2 and coluna == 2){         //Se o par linhas e coluna for (2,2) indica que a tecla pressinada foi 9
      num = '9';                                   //
    }
    else if (linhas == 3 and coluna == 0){         //Se o par linhas e coluna for (3,0) indica que a tecla pressinada foi *
      num = '*';                                   //
    }
    else if (linhas == 3 and coluna == 1){         //Se o par linhas e coluna for (3,1) indica que a tecla pressinada foi 0
      num = '0';                                   //
    }
    else if (linhas == 3 and coluna == 2){         //Se o par linhas e coluna for (3,2) indica que a tecla pressinada foi #
      num = '#';                                   //
    }
    return num;                                    //retorna o valor da tecla 
}


//Função responsável por exibir no display a tecla pressionada.
//num: valor da tecla a ser exibida no display
void LCD_setup (char num){
    lcd.clear();                                 //Limpa o display
    lcd.setCursor(0, 0);                         //Configura a coluna e a linha, repectivamente, onde a mensagem irá iniciar. Nesse caso, a mensagem irá aparecer na primeira linha do display
    lcd.print("Tecla: ");                        //Printa a mensagem "Tecla: "
    lcd.setCursor(0, 1);                         //Configura a coluna e a linha, repectivamente, onde a mensagem irá iniciar. Nesse caso, a mensagem irá aparecer na segunda linha do display
    lcd.print(num);                              //Printa o valor da tecla                           
 }


//Programa principal --> Máquina de Estados
void loop(){

  switch (estado){
    //Estado 0
    case 0:
        //Se nenhuma coluna estiver pressionada (leitura dos pinos deve ser igual a 1) e a linha analisada for 0
        //atribui-se a variável estado valor 1 (pula para o próximo estado) e configura a linha 1     
        if (digitalRead(C1)==1 and digitalRead(C2)==1 and digitalRead(C3)==1 and linhas == 0){
            estado = 1;
            linhas = 1;
            linha(linhas);
        }
        //Se qualquer coluna estiver pressionada (leitura de um dos pinos deve ser igual a 0) e a linha analisada for 0
        //atribui-se a variável estado valor 4 (estado de debounce) e configura a linha 0.
        //Além disso, verifica qual coluna da linha 0 foi pressionada (qual coluna é diferente de 1) e atribui um valor que identifica essa coluna                
        if ((digitalRead(C1)!=1 or digitalRead(C2)!=1 or digitalRead(C3)!=1) and linhas == 0){
            estado = 4;
            linhas = 0;
            linha(linhas);

            //Identifica qual coluna foi pressionada
            if (digitalRead(C1)!=1){
              coluna = 0;
            }

            if (digitalRead(C2)!=1){
              coluna = 1;
            }

            if (digitalRead(C3)!=1){
              coluna = 2;
            }
        }
        break;

    //Estado 1
    case 1:
        //Se nenhuma coluna estiver pressionada (leitura dos pinos deve ser igual a 1) e a linha analisada for 1
        //atribui-se a variável estado valor 2 (pula para o próximo estado) e configura a linha 2
        if (digitalRead(C1)==1 and digitalRead(C2)==1 and digitalRead(C3)==1 and linhas == 1){
            estado = 2;
            linhas = 2;
            linha(linhas);
        }
        //Se qualquer coluna estiver pressionada (leitura de um dos pinos deve ser igual a 0) e a linha analisada for 1
        //atribui-se a variável estado valor 4 (estado de debounce) e configura a linha 1.
        //Além disso, verifica qual coluna da linha 1 foi pressionada (qual coluna é diferente de 1) e atribui um valor que identifica essa coluna
        if ((digitalRead(C1)!=1 or digitalRead(C2)!=1 or digitalRead(C3)!=1) and linhas == 1){
            estado = 4;
            linhas = 1;
            linha(linhas);

            //Identifica qual coluna foi pressionada
            if (digitalRead(C1)!=1){
              coluna = 0;
            }

            if (digitalRead(C2)!=1){
              coluna = 1;
            }

            if (digitalRead(C3)!=1){
              coluna = 2;
            }
        }
        break;

    //Estado 2
    case 2:
        //Se nenhuma coluna estiver pressionada (leitura dos pinos deve ser igual a 1) e a linha analisada for 2
        //atribui-se a variável estado valor 3 (pula para o próximo estado) e configura a linha 3
        if (digitalRead(C1)==1 and digitalRead(C2)==1 and digitalRead(C3)==1 and linhas == 2){
            estado = 3;
            linhas = 3;
            linha(linhas);
        }
        //Se qualquer coluna estiver pressionada (leitura de um dos pinos deve ser igual a 0) e a linha analisada for 2
        //atribui-se a variável estado valor 4 (estado de debounce) e configura a linha 2.
        //Além disso, verifica qual coluna da linha 2 foi pressionada (qual coluna é diferente de 1) e atribui um valor que identifica essa coluna
        if ((digitalRead(C1)!=1 or digitalRead(C2)!=1 or digitalRead(C3)!=1) and linhas == 2){
            estado = 4;
            linhas = 2;
            linha(linhas);

            //Identifica qual coluna foi pressionada
            if (digitalRead(C1)!=1){
              coluna = 0;
            }
            if (digitalRead(C2)!=1){
              coluna = 1;
            }
            if (digitalRead(C3)!=1){
              coluna = 2;
            }
        }
        break;

    //Estado 3
    case 3:
        //Se nenhuma coluna estiver pressionada (leitura dos pinos deve ser igual a 1) e a linha analisada for 3
        //atribui-se a variável estado valor 0 (pula para o próximo estado) e configura a linha 0.
        //Note que o estado 3 fecha o ciclo de varredura, retornando novamente para o estado inicial.        
        if (digitalRead(C1)==1 and digitalRead(C2)==1 and digitalRead(C3)==1 and linhas == 3){
            estado = 0;
            linhas = 0;
            linha(linhas);
        }
        //Se qualquer coluna estiver pressionada (leitura de um dos pinos deve ser igual a 0) e a linha analisada for 3
        //atribui-se a variável estado valor 4 (estado de debounce) e configura a linha 3.
        //Além disso, verifica qual coluna da linha 3 foi pressionada (qual coluna é diferente de 1) e atribui um valor que identifica essa coluna
        if ((digitalRead(C1)!=1 or digitalRead(C2)!=1 or digitalRead(C3)!=1) and linhas == 3){
            estado = 4;
            linhas = 3;
            linha(linhas);

            //Identifica qual coluna foi pressionada
            if (digitalRead(C1)!=1){
              coluna = 0;
            }
            if (digitalRead(C2)!=1){
              coluna = 1;
            }
            if (digitalRead(C3)!=1){
              coluna = 2;
            }
        }
        break;

    //Estado 4
    case 4:
        estado = 5;                 //Transita para o estado 5 e
        tempo = 0;                  //atribui a variável tempo (interrupção por temporizador) o valor zero para auxiliar na verificação do debounce
        break;

    //Estado 5
    case 5:
    //Verifica se de fato a tecla foi pressionada
        //se o tempo for menor que 32 (o que indica 50ms) o programa continua no estado 5
        if (tempo<32){
            estado = 5;
        }
        //se o tempo for maior ou igual a 32 e a leitura atual relacionada ao pino da coluna, que foi identificado em um dos estados anteriores
        //(0, 1, 2 ou 3), for igual a zero (o que indica que a coluna foi realmente pressionada)
        //o fluxo do programa vai para o estado 6 mas antes identifica qual foi a tecla pressionada com base nos valores da linha e coluna
        //também provenientes de um dos estados anteriores (0, 1, 2 ou 3). O valor da tecla é mostrado em um display LCD.        
        if (tempo>=32 and colunas(coluna)==0){
            estado = 6;
            tecla = digito(coluna,linhas);
            LCD_setup(tecla);
        }
        //se o tempo for maior ou igual a 32 e a leitura atual relacionada ao pino da coluna, que foi identificado em um dos estados anteriores
        //(0, 1, 2 ou 3), ainda for igual a 1 isso indica que a coluna na verdade não foi pressionada (foi apenas um ruido). Então, o programa
        //retorna para o estado zero e linha 0 e recomeça a varredura
        if (tempo>=32 and colunas(coluna)!=0){
            estado = 0;
            linhas = 0;
            linha(linhas);
        }
        break;
	
      //Estado 6
      case 6:
        estado = 7;                 //Transita para o estado 7 e
        tempo = 0;                  //atribui a variável tempo (interrupção por temporizador) o valor zero para auxiliar na verificação do debounce
        break;

      //Estado 7
      case 7:
        //Verifica se de fato a tecla foi solta
          //se o tempo for menor que 32 (o que indica 50ms) o programa continua no estado 6
          if (tempo<32){
              estado = 7;
          }
          //se o tempo for maior ou igual a 32 e a leitura atual relacionada ao pino da coluna, que foi identificado em um dos estados anteriores
          //(0, 1, 2 ou 3), for igual a 1 (o que indica que a coluna foi realmente solta)
          //o fluxo do programa vai para o estado inicial 0 e configura a linha para zero
          if (tempo>=32 and colunas(coluna)!=0){
              estado = 0;
              linhas = 0;
              linha(linhas);
          }
          //se o tempo for maior ou igual a 32 e a leitura atual relacionada ao pino da coluna, que foi identificado em um dos estados anteriores
          //(0, 1, 2 ou 3), ainda for igual a 0 isso indica que a coluna na verdade não foi solta. Então, o programa continua no estado 6
          if (tempo>=32 and colunas(coluna)==0){
              estado = 7;
          }
          break;
  }
}